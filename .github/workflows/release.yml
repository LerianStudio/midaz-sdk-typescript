name: Release

on:
  push:
    branches:
      - main
      - develop
      - 'hotfix/v*'
    paths-ignore:
      - '.gitignore'
      - '**/*.env'
      - '*.env'
      - '**/*.md'
      - '*.md'
      - '**/*.txt'
      - '*.txt'

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

permissions:
  id-token: write
  contents: write
  pull-requests: write
  packages: write
  issues: write

env:
  NODE_VERSION: '20'

jobs:
  release:
    name: Build, Test & Release
    runs-on: ubuntu-latest
    if: github.repository_owner == 'LerianStudio'

    outputs:
      released: ${{ steps.semantic_release.outputs.new_release_published }}
      version: ${{ steps.semantic_release.outputs.new_release_version }}

    steps:
      - name: Generate app token
        id: generate-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.LERIAN_STUDIO_MIDAZ_PUSH_BOT_APP_ID }}
          private-key: ${{ secrets.LERIAN_STUDIO_MIDAZ_PUSH_BOT_PRIVATE_KEY }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ steps.generate-token.outputs.token }}
          fetch-depth: 0

      - name: Sync with remote branch
        run: |
          git fetch origin ${{ github.ref_name }}
          git reset --hard origin/${{ github.ref_name }}

      - name: Import GPG Key
        uses: crazy-max/ghaction-import-gpg@v6
        id: import_gpg
        with:
          gpg_private_key: ${{ secrets.LERIAN_CI_CD_USER_GPG_KEY }}
          passphrase: ${{ secrets.LERIAN_CI_CD_USER_GPG_KEY_PASSWORD }}
          git_committer_name: ${{ secrets.LERIAN_CI_CD_USER_NAME }}
          git_committer_email: ${{ secrets.LERIAN_CI_CD_USER_EMAIL }}
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Run tests
        run: npm test

      - name: Generate documentation
        run: npm run docs

      - name: Semantic Release
        id: semantic_release
        uses: cycjimmy/semantic-release-action@v4
        with:
          ci: false
          semantic_version: 23.0.8
          extra_plugins: |
            conventional-changelog-conventionalcommits@v7.0.2
            @saithodev/semantic-release-backmerge
            @semantic-release/npm
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GIT_AUTHOR_NAME: ${{ secrets.LERIAN_CI_CD_USER_NAME }}
          GIT_AUTHOR_EMAIL: ${{ secrets.LERIAN_CI_CD_USER_EMAIL }}
          GIT_COMMITTER_NAME: ${{ secrets.LERIAN_CI_CD_USER_NAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.LERIAN_CI_CD_USER_EMAIL }}

  publish-github-packages:
    name: Publish to GitHub Packages
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.released == 'true' && github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js for GitHub Packages
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://npm.pkg.github.com'
          scope: '@lerianstudio'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Configure package for GitHub registry
        run: |
          cp package.json package.json.original.tmp
          sed 's/"name": "midaz-sdk"/"name": "@lerianstudio\/midaz-sdk"/' package.json > package.json.modified.tmp
          mv package.json.modified.tmp package.json

      - name: Publish to GitHub Packages
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Restore original package.json
        run: mv package.json.original.tmp package.json

  generate_changelog:
    name: üìù Generate AI-powered Changelog
    runs-on: ubuntu-22.04
    needs: release
    if: needs.release.outputs.released == 'true'

    steps:
      - name: Generate app token
        uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ secrets.LERIAN_STUDIO_MIDAZ_PUSH_BOT_APP_ID }}
          private-key: ${{ secrets.LERIAN_STUDIO_MIDAZ_PUSH_BOT_PRIVATE_KEY }}

      - name: Generate AI Changelog
        uses: LerianStudio/github-actions-gptchangelog@develop
        with:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LERIAN_CI_CD_USER_GPG_KEY: ${{ secrets.LERIAN_CI_CD_USER_GPG_KEY }}
          LERIAN_CI_CD_USER_GPG_KEY_PASSWORD: ${{ secrets.LERIAN_CI_CD_USER_GPG_KEY_PASSWORD }}
          LERIAN_CI_CD_USER_NAME: ${{ secrets.LERIAN_CI_CD_USER_NAME }}
          LERIAN_CI_CD_USER_EMAIL: ${{ secrets.LERIAN_CI_CD_USER_EMAIL }}
          LERIAN_STUDIO_MIDAZ_PUSH_BOT_APP_ID: ${{ secrets.LERIAN_STUDIO_MIDAZ_PUSH_BOT_APP_ID }}
          LERIAN_STUDIO_MIDAZ_PUSH_BOT_PRIVATE_KEY: ${{ secrets.LERIAN_STUDIO_MIDAZ_PUSH_BOT_PRIVATE_KEY }}

  notify-integration:
    name: Notify Integration Updates
    runs-on: ubuntu-latest
    needs: [release, publish-github-packages]
    if: needs.release.outputs.released == 'true' && github.ref == 'refs/heads/main'

    steps:
      - name: Generate app token
        id: generate-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.LERIAN_STUDIO_MIDAZ_PUSH_BOT_APP_ID }}
          private-key: ${{ secrets.LERIAN_STUDIO_MIDAZ_PUSH_BOT_PRIVATE_KEY }}

      - name: Create integration update issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            const version = '${{ needs.release.outputs.version }}';

            // Create an issue in the main monorepo to update demo data generator
            await github.rest.issues.create({
              owner: 'LerianStudio',
              repo: 'midaz',
              title: `üéâ Update demo data generator to use published SDK v${version}`,
              body: `
              ## üöÄ New SDK Release Available!
              
              The Midaz TypeScript SDK has been published to npm:
              - **Version**: v${version}
              - **Package**: https://www.npmjs.com/package/midaz-sdk
              - **GitHub Packages**: https://github.com/LerianStudio/midaz-sdk-typescript/packages
              
              ## üì¶ Integration Updates Required
              
              Update the demo data generator to use the published package instead of the local file dependency:
              
              **Before:**
              \`\`\`json
              {
                "dependencies": {
                  "midaz-sdk": "file:sdk-source"
                }
              }
              \`\`\`
              
              **After:**
              \`\`\`json
              {
                "dependencies": {
                  "midaz-sdk": "^${version}"
                }
              }
              \`\`\`
              
              ## ‚ú® Benefits
              
              - üìâ Reduce package-lock.json size by ~1,800 dependencies
              - ‚ö° Improve build times significantly
              - üîÑ Enable proper semantic versioning
              - üö´ Remove need for local SDK cloning
              - üõ°Ô∏è Better dependency security
              
              ## üîß Implementation Steps
              
              1. Update \`scripts/demo-data/package.json\` with new SDK version
              2. Remove \`sdk-source/\` directory dependency  
              3. Update \`run-generator.sh\` to remove SDK cloning logic
              4. Test demo data generation with published SDK
              5. Update documentation
              
              cc @fredamaral
              `,
              labels: ['enhancement', 'demo-data', 'sdk', 'dependencies']
            });

            console.log('Integration update issue created successfully!');
